@model IEnumerable<StoreFrontSchema.DATA.EF.Models.Weapon>

@{
    ViewData["Title"] = "Our Weapons";
}

<h1><em>@ViewData["Title"]</em></h1>

@*
    Steps to implement Datatables (for client-side search, filter, & page)
    1) (_Layout) add the <script> for jQuery.js -- ONLY if it doesn't already exist
    2) (_Layout) add the <script> for plugin.js (found on the plugin's website - either available from CDN or file download)
    3) (_Layout) add the <link> for plugin.css (if required - some plugins do not require any CSS)
    4) (Index) add/modify your HTML to fit the requirements of the plugin
    - Here, we use Datatables with the default scaffolded <table> from EF - we don't need to make any adjustments
    to implement the basic datatables functionality
    5) (Index) call the plugin function from @section Scripts { }
    6) (optional - CSS or Plugin Function) Customize the plugin - update styles, modifying the default implementation
*@


<p align="center">
    @if (User.IsInRole("Admin"))
    {
         <span>
            <a asp-action="Create">Add New Weapon</a> |
            <a asp-action="Discontinued">Discontinued Weapons</a> |
         </span>

    }
    <a asp-action="TiledWeapons">Tile View</a>
</p>
    <table class="table">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.ProductName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ProductPrice)
                </th>
                @*<th>
                @Html.DisplayNameFor(model => model.ProductDescription)
                </th>*@
                @*<th>
                    @Html.DisplayNameFor(model => model.InStock)
                </th>*@
                @*<th>
                @Html.DisplayNameFor(model => model.BackOrder)
                </th>
                <th>
                @Html.DisplayNameFor(model => model.IsDiscontinued)
                </th>*@
                <th>
                    @Html.DisplayNameFor(model => model.ProductImage)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Category)
                </th>
                <th>
                @Html.DisplayNameFor(model => model.Smith)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        <a asp-action="Details" asp-route-id="@item.ProductId">
                            @Html.DisplayFor(modelItem => item.ProductName)
                        </a>
                    </td>
                    @*<td>
                @Html.DisplayFor(modelItem => item.ProductName)
                </td>*@
                    <td>
                        @Html.DisplayFor(modelItem => item.ProductPrice)
                    </td>
                    @*<td>
                @Html.DisplayFor(modelItem => item.ProductDescription)
                </td>*@
                    @*<td>
                        @Html.DisplayFor(modelItem => item.InStock)
                    </td>*@
                    @*<td>
                @Html.DisplayFor(modelItem => item.BackOrder)
                </td>
                <td>
                @Html.DisplayFor(modelItem => item.IsDiscontinued)
                </td>*@
                    <td>
                        @*@Html.DisplayFor(modelItem => item.ProductImage)*@
                        <img src="~/images/@item.ProductImage" name="Image" class="img-fluid" alt="@item.ProductDescription"/>
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Category.CategoryName)
                    </td>
                    <td>
                         @Html.DisplayFor(modelItem => item.Smith.SmithName)
                    </td>
                    <td>
                        <a asp-action="Edit" asp-route-id="@item.ProductId">Edit</a>|
                        @*                <a asp-action="Details" asp-route-id="@item.ProductId">Details</a> |
                    *@                <a asp-action="Delete" asp-route-id="@item.ProductId">Delete</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
@*
    To implement datatables we need to add a section for scripts, then call the plugin function.
    We can get that function from http://datatables.net
*@

@section scripts {

    <script>

        //Update the selector to target the element with the table class
        let table = new DataTable('.table');


    </script>

}
