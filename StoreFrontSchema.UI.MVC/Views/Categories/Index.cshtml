@model IEnumerable<StoreFrontSchema.DATA.EF.Models.Category>

@{
    ViewData["Title"] = "Weapons Categories";
}

<h1><em>@ViewData["Title"]</em></h1>

@*<p>
    <a asp-action="Create">Create New Category</a>
</p>*@
<div class="row">
    <div align="center" class="offset-3 col-md-6 mb-3">
        <button id="ToggleCategoryCreate" class="btn btn-primary">
            Add New Category
        </button>
    </div>
</div>
@*
    The div below contains the partial view for our categorycreate form.
    We will toggle visibility of this div using JS and the button above(Create).
*@

<div id="CategoryCreate">
    <partial name="CategoryCreate" model="new StoreFrontSchema.DATA.EF.Models.Category()" />
</div>


@*
    We will need to create a container to
    display status messages to the user. 4/21/23
*@
<div class="row">
    <div class="offset-3 col-md-6">
        <div id="MessageContent" class="text-center"></div>
    </div>
</div>


@*
    We are adding an ID attribute to the table below for
    easy selection via JS and will select it using JQuery. 4/21/2023
*@

<table class="table" id="CategoriesTable">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.CategoryName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CategoryDescription)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
            @*We are also adding an ID attribute to the <tr>
        that is created for each category record. Again we will
        use this for easy selection via JS.4/21/23*@


        <tr id ="Category-@item.CategoryId">
            <td>
                @Html.DisplayFor(modelItem => item.CategoryName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CategoryDescription)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.CategoryId">Edit</a> |

               @* <a asp-action="Details" asp-route-id="@item.CategoryId">Details</a> |*@

                    <button type="button" class="DetailsLink btn btn-link" id="@item.CategoryId" data-toggle="modal" data-target="#CategoryDetails">
                        Details
                    </button> |

               @* <a asp-action="Delete" asp-route-id="@item.CategoryId">Delete</a>*@
                    <a data-ajax="true" data-ajax-confirm="Are you sure you want to delete @item.CategoryName?"
                       data-ajax-failure="deleteFailed" data-ajax-success="deleteConfirmed" data-ajax-method="POST"
                       href="~/Categories/AjaxDelete/@item.CategoryId">
                        Delete
                    </a>
            </td>
        </tr>
}
    </tbody>
</table>

@*
    Here we wil create a booststrap modal to display category details 4/21/23 (Details-modal)
*@
<div class="modal fade" id="CategoryDetails" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Details</h5>
            </div>
            <div class="modal-body" id="DetailsBody">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@*
    We will need to create a section for scripts in order
    to write the scripts we need and have them execute only
    when we are on this view
*@

@section Scripts {

    <script>

        /**********************************AJAX DELETE***************************************/

        function deleteConfirmed(response, status, data) {

            //Remove the row from the table
            let rowId = "#Category-" + response.id;

            //Find the row in the table and remove it
            $("#CategoriesTable").find(rowId).remove();

            //Display a status message
            $("#MessageContent").html("<div class='alert alert-success'>" + response.message + "</div>");


        }

        function deleteFailed(response, status, data) {

            //Display status message
            $("#MessageContent").html("<div class='alert alert-danger'>Delete unsuccessful.</div>");


        }
        /**********************************AJAX DETAILS***************************************/

        $(".DetailsLink").on("click", function (e) {

            let catId = $(this).attr("id");

            $("#CategoryDetails .modal-body").load("/Categories/CategoryDetails/" + catId);

        });
        $("#CategoryCreate").hide(); //On page load automatically hide the create form

        $("#ToggleCategoryCreate").on("click", function () {

            $("#CategoryCreate").toggle();//Toggles visibility of create form

        });

        //Summary: When the form is submitted, we will serialize the data and send that JSON data to the controller.
        //  The message content will then display ANY updates fro the user. And JQuery AJAX will perform the following:
        //- Call the POST AjaxCreate() from categories controller
        //- Pass the JSON data from the form
        //- On failure, we will notify user of the error
        //- On success, we will notify user of success, reset the form,
        //  insert the new row into the table on the page

        $("#CategoryCreateForm").on("submit", function (e) {

            //Prevents the default behavior in this case the page
            //reload and redirect when a user submits a form
            e.preventDefault();

            let formData = $(this).serializeArray();

            console.log(formData);

            $.ajax({

                url: "/Categories/AjaxCreate",
                type: "POST",
                data: formData,
                dataType: "json",
                error: function (e) {
                    $("#MessageContent").html("<div class='alert alert-danger'>There was a problem.</div>");
                },
                success: function (category) {
                    $("#MessageContent").html("<div class='alert alert-success'>Category added successfully!</div>");
                    $("#CategoryCreateForm")[0].reset();
                    $(function () {
                        let row = '<tr id="Category-' + category.categoryId + '"><td>' + category.categoryName
                            + '</td><td>' + category.categoryDescription
                            + '</td><td>Refresh the page for options</td></tr>';
                        $("#CategoriesTable").append(row);
                        $("#CategoryCreate").hide();
                    });
                }
            });


        })




    </script>

}

